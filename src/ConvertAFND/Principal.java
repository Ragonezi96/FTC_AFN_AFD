/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ConvertAFND;

import ReadWriteXml.GerarXML;
import ReadWriteXml.ReadXml;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import objAutomato.Automaton;
import objAutomato.Estado;
import objAutomato.EstadoFinal;
import objAutomato.EstadoInicial;
import objAutomato.Transition;


public class Principal extends javax.swing.JFrame {

    private final ReadXml _readXml = new ReadXml();
    private Automaton automato_afn = new Automaton();

    private Automaton auto_afd = new Automaton();
    private List<Estado> estados_afd = new ArrayList<>();
    private List<Transition> transicoes_afd = new ArrayList<>();
    private List<EstadoFinal> estadosFinaisAFD = new ArrayList<>();
    private String Alfabeto_afd = automato_afn.getAlfabeto();
    private String alfabeto[];
    private int proximaLinhaAFD;
    private int qtdLinhasAFND;
    private int qtdLinhasAFD;
    private String arqName;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldAlfabeto = new javax.swing.JTextField();
        jTextFieldEstadoInicial = new javax.swing.JTextField();
        jTextFieldEntrada = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldEstadosFinais = new javax.swing.JTextField();
        buttonConverter = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaResultados = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaTransicaoAFD = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaTransicaoAFND = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        buttonExecutar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Convert AFND em AFD ");

        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });


        jTextFieldEntrada.setEnabled(false);
        jTextFieldEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldEntradaKeyPressed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Senten√ßa");
        jLabel1.setToolTipText("");
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1))))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(jTextFieldEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addContainerGap())
        );

        buttonConverter.setText("Converter ");
        buttonConverter.setEnabled(false);
        buttonConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConverterActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));

        jTextAreaResultados.setEditable(false);
        jTextAreaResultados.setColumns(40);
        jTextAreaResultados.setRows(10);
        jScrollPane1.setViewportView(jTextAreaResultados);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
        );


        tabelaTransicaoAFD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", null},
                {"", "", "", null},
                {"", "", "", null},
                {"", "", "", null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "q", "\u03c3", "\u03b4(\u03c3,q)", "F"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabelaTransicaoAFD);


        tabelaTransicaoAFND.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", ""},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "q", "\u03c3", "\u03b4(\u03c3,q)"
            }
        ));
        jScrollPane5.setViewportView(tabelaTransicaoAFND);

        
        

        jButton2.setText("Salvar AFD ");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("1¬∫ Carrega arquivo xml contendo um AFN.");

        jLabel3.setText("2¬∫ Converte um AFN em AFD. ");

        jLabel8.setText("4¬∫ Cria um Xml contendo um AFD.");

        buttonExecutar.setText("Executar ");
        buttonExecutar.setEnabled(false);
        buttonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecutarActionPerformed(evt);
            }
        });

        jLabel9.setText("3¬∫ Teste a senten√ßa w no AFD.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonExecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonConverter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel9))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()                
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jLabel2))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonConverter)
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(buttonExecutar))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel8))))
                .addGap(11, 11, 11))
        );



        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String current = new java.io.File(".").getCanonicalPath();
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                arqName = selectedFile.getName();
                automato_afn = _readXml.readXml(selectedFile.getAbsolutePath());
                preencheTela();
            }
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void preencheTela() {
        List<Estado> estados = automato_afn.getEstado();
        String Alfabeto = automato_afn.getAlfabeto();
        EstadoInicial estadoInicial = automato_afn.getEstadoincial();
        List<EstadoFinal> estadoFinal = automato_afn.getEstadofinal();
        List<Transition> transition = automato_afn.getTransition();

        String estado_Names = estados.stream().map(Estado::getName).collect(Collectors.joining(", "));
        String estado_final = estadoFinal.stream().map(EstadoFinal::getName).collect(Collectors.joining(", "));
        String _transition = transition.stream().map(Transition::getRead).collect(Collectors.joining(""));

        jTextFieldAlfabeto.setText(Alfabeto);
        jTextFieldEstadoInicial.setText(estadoInicial.getName());
        jTextFieldEstadosFinais.setText(estado_final);
        buttonConverter.setEnabled(true);
        jTextFieldEntrada.setText(_transition);
        
        for (int i = 0;
                i < transition.size();
                i++) {
            String from = estados.get(transition.get(i).getFrom()).getName();
            String read = transition.get(i).getRead();
            String to = estados.get(transition.get(i).getTo()).getName();
            tabelaTransicaoAFND.setValueAt(from, i, 0);
            tabelaTransicaoAFND.setValueAt(read, i, 1);
            tabelaTransicaoAFND.setValueAt(to, i, 2);
        }
    }

    private void buttonConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConverterActionPerformed
        int i;
        jTextAreaResultados.append("Convertendo aut√¥mato finito n√£o-determin√≠stico..." + "\n\n");
        // Algumas inicializa√ß√µes
        qtdLinhasAFND = 0;
        proximaLinhaAFD = 0;
        // Limpa tabelaTransicaoAFD
        for (i = 0; i < tabelaTransicaoAFD.getRowCount(); i++) {
            tabelaTransicaoAFD.setValueAt(null, i, 0);
            tabelaTransicaoAFD.setValueAt(null, i, 1);
            tabelaTransicaoAFD.setValueAt(null, i, 2);
            tabelaTransicaoAFD.setValueAt(null, i, 3);
        }
        alfabeto = jTextFieldAlfabeto.getText().split(",");
        // Conta a quantidade de linhas efetivamente utilizadas
        for (i = 0; (i < tabelaTransicaoAFND.getRowCount() && tabelaTransicaoAFND.getValueAt(i, 0) != null); i++) {
            if (!tabelaTransicaoAFND.getValueAt(i, 0).toString().isEmpty()) {
                qtdLinhasAFND++;
            } else {
                break;
            }
        }
        jTextAreaResultados.setText("");    // Limpa os resultados
        jTextAreaResultados.append("Convertendo aut√¥mato finito n√£o-determin√≠stico..." + "\n\n");
        jTextAreaResultados.append("Constr√≥i estados a partir do estado inicial: " + automato_afn.getEstadoincial().getName() + "\n");
        constroiEstados(automato_afn.getEstadoincial().getName());
        jTextAreaResultados.append("\nFinal da convers√£o para aut√¥mato finito determin√≠stico");
        jTextFieldEntrada.setEnabled(true);
        jButton2.setEnabled(true);
    }//GEN-LAST:event_buttonConverterActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            GerarXML gera = new GerarXML();
            
            gera.gerar(auto_afd, arqName, true);
            JOptionPane.showMessageDialog(null, "O arquivo AFD_" + arqName + " foi gerado com sucesso!");
        } catch (IOException ex) {
            Logger.getLogger(Principal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void buttonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecutarActionPerformed
        GerarXML gera = new GerarXML();
        try {
            gera.gerar(auto_afd, arqName, false);

        } catch (IOException ex) {
            Logger.getLogger(Principal.class
                .getName()).log(Level.SEVERE, null, ex);
        }
        int i;
        jTextAreaResultados.setText("");    // Limpa os resultados
        // Algumas inicializa√ß√µes
        qtdLinhasAFD = transicoes_afd.size();
        // Aut√¥mato executando
        jTextAreaResultados.append("Processando, aguarde..." + "\n\n");
        String p = auto_afd.getEstadoincial().getName();    // Seleciona o estado inicial
        for (i = 0; i < jTextFieldEntrada.getText().length(); i++) {
            // Encontra o pr√≥ximo estado
            p = proximoEstado(p, jTextFieldEntrada.getText().substring(i, i + 1));
        }
        if (estadoFinalAFD(p)) {
            jTextAreaResultados.append("\n\n" + "Entrada aceita!");
        } else {
            jTextAreaResultados.append("\n\n" + "Entrada rejeitada!");
        }
        // Fim da execu√ß√£o do aut√¥mato
    }//GEN-LAST:event_buttonExecutarActionPerformed

    private void jTextFieldEntradaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEntradaKeyPressed
        try {
            String afb = automato_afn.getAlfabeto();
            if ((afb.length() > 0) && (evt.getKeyChar() != ' ')) {
                jTextFieldEntrada.setEnabled(true);
                if (afb.contains(String.valueOf(evt.getKeyChar()))) {
                    buttonExecutar.setEnabled(true);
                    jTextFieldEntrada.setForeground(Color.BLACK);
                } else {
                    buttonExecutar.setEnabled(false);
                    jTextFieldEntrada.setForeground(Color.RED);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jTextFieldEntradaKeyPressed


    private void constroiEstados(String estado) {
        int i, j, k;
        String novoEstado, estadoFinal;
        String estados[];
        List<Transition> transicoesAFND = automato_afn.getTransition();

        // Percorre uma vez para cada s√≠mbolo do alfabeto
        for (j = 0; j < alfabeto.length; j++) {
            novoEstado = "";
            estados = estado.split(",");

            // Percorre os estados recebidos como par√¢metro para encontrar o novo estado
            for (k = 0; k < estados.length; k++) {
                // Percorre a tabela de transi√ß√µes do AFND
                for (i = 0; i < transicoesAFND.size(); i++) {
                    // Encontra a linha onde o estado de origem √© o estado que est√° sendo testado
                    if (localizarTransicao(transicoesAFND.get(i).getFrom(), automato_afn).equals(estados[k]) && transicoesAFND.get(i).getRead().equals(alfabeto[j])) {
                        // Somente inclui em novoEstado se novoEstado n√£o cont√©m o estado
                        if (!contemEstado(novoEstado, localizarTransicao(transicoesAFND.get(i).getTo(), automato_afn))) {
                            if (novoEstado != "") {
                                novoEstado += ",";
                            }
                            novoEstado += localizarTransicao(transicoesAFND.get(i).getTo(), automato_afn);
                        }
                    }
                }
            }

            // Se n√£o encontrou novoEstado ent√£o vai para a pr√≥xima itera√ß√£o
            if (novoEstado == "") {
                continue;
            }
            //Ordena estado 
            novoEstado = ordenarEstado(novoEstado);

            boolean verifica = false;
            // Verifica se novoEstado j√° foi inclu√≠do na tabela AFD
            for (i = 0; i < transicoes_afd.size(); i++) {
                //if (tabelaTransicaoAFD.getValueAt(i,0).toString().equals(novoEstado))
                if (transicoes_afd.get(i).getFrom() == retornaIdEstado(estado)
                        && transicoes_afd.get(i).getRead().equals(alfabeto[j])
                        && transicoes_afd.get(i).getTo() == retornaIdEstado(novoEstado)) {
                    verifica = true;
                    break;
                }
            }
            // Se novoEstado ainda n√£o foi inclu√≠do no AFD, ent√£o inclui e constr√≥i novos estados
            if (!verifica) {
                Estado newEstado = new Estado();
                Transition newTransicao = new Transition();
                EstadoFinal newEstadoFinal = new EstadoFinal();
                newEstado.setId(estados_afd.size());
                newEstado.setName(estado);
                newEstado = adicionarEstado(newEstado);

                String aux = newEstado.getName().replaceAll("q", "");

                tabelaTransicaoAFD.setValueAt("q" + newEstado.getId() + " [" + aux + "]", proximaLinhaAFD, 0);
                tabelaTransicaoAFD.setValueAt(alfabeto[j], proximaLinhaAFD, 1);
                newEstado = new Estado();
                newEstado.setId(estados_afd.size());
                newEstado.setName(novoEstado);
                newEstado = adicionarEstado(newEstado);

                aux = newEstado.getName().replaceAll("q", "");

                tabelaTransicaoAFD.setValueAt("q" + newEstado.getId() + " [" + aux + "]", proximaLinhaAFD, 2);
                newTransicao.setFrom(retornaIdEstado(estado));
                newTransicao.setTo(retornaIdEstado(novoEstado));
                newTransicao.setRead(alfabeto[j]);
                transicoes_afd.add(newTransicao);
                estadoFinal = estadoFinalAFND(novoEstado);

                tabelaTransicaoAFD.setValueAt(estadoFinal, proximaLinhaAFD, 3);
                if (estadoFinal.equals("*")) {
                    if (!verficaEstadoFinalExiste(novoEstado)) {
                        newEstadoFinal.setId(retornaIdEstado(novoEstado));
                        newEstadoFinal.setName(novoEstado);
                        estadosFinaisAFD.add(newEstadoFinal);
                    }
                }

                proximaLinhaAFD++;

                jTextAreaResultados.append("---Inclui transi√ß√£o no AFD: " + estado + "  |  " + alfabeto[j] + "  |  " + novoEstado + "  " + estadoFinal + "\n");
                jTextAreaResultados.append("Constr√≥i estados a partir do novo estado: " + novoEstado + "\n");
                constroiEstados(novoEstado);
            }
        }
        auto_afd.setAlfabeto(Alfabeto_afd);
        auto_afd.setEstado(estados_afd);
        auto_afd.setEstadofinal(estadosFinaisAFD);
        auto_afd.setTransition(transicoes_afd);
        auto_afd.setEstadoincial(automato_afn.getEstadoincial());

    }

    private String localizarTransicao(int id, Automaton auto) {
        List<Estado> e = auto.getEstado();
        for (int i = 0; i < e.size(); i++) {
            if (e.get(i).getId() == id) {
                return e.get(i).getName();
            }
        }
        return "";
    }

    private boolean verficaEstadoFinalExiste(String nome) {
        boolean verifica = false;
        for (int i = 0; i < estadosFinaisAFD.size(); i++) {
            if (nome == null){
                verifica = false;
            }
            else if ((nome.equals(estadosFinaisAFD.get(i).getName()))) {
                verifica = true;
            }
        }
        return verifica;
    }

    private int retornaIdEstado(String nome) {
        int id = -1;
        for (int i = 0; i < estados_afd.size(); i++) {
            if (nome == null){
                id = -1;
            }
            else if ((nome.equals(estados_afd.get(i).getName()))) {
                id = estados_afd.get(i).getId();
            }
        }
        return id;
    }

    private Estado adicionarEstado(Estado e) {
        boolean verifica = false;
        for (int i = 0; i < estados_afd.size(); i++) {
            if ((e.getName().equals(estados_afd.get(i).getName()))) {
                e = estados_afd.get(i);
                return e;
            }
        }
        if (!verifica) {
            estados_afd.add(e);
        }
        return e;
    }

    private boolean contemEstado(String estado1, String estado2) {
        int i;
        String estados[] = estado1.split(",");
        for (i = 0; i < estados.length; i++) {
            if (estados[i].equals(estado2)) {
                break;
            }
        }
        if (i < estados.length) {
            return true;
        } else {
            return false;
        }
    }

    private String ordenarEstado(String estado) {
        String tiraVirgula[] = estado.split(",");
        String tiraVirgula2 = "";
        for (int i = 0; i < tiraVirgula.length; i++) {
            tiraVirgula2 += tiraVirgula[i];
        }
        String tiraQ[] = tiraVirgula2.split("q");
        Arrays.sort(tiraQ, 0, tiraQ.length);
        String addVirgula = "";

        for (int i = 0; i < tiraQ.length; i++) {
            if (!tiraQ[i].equals("")) {
                if (i != (tiraQ.length - 1)) {
                    addVirgula += "q" + tiraQ[i] + ",";
                } else {
                    addVirgula += "q" + tiraQ[i];
                }
            }
        }
        return addVirgula;
    }

    private String estadoFinalAFND(String s) {
        int i, j;
        String estadosFinais[] = jTextFieldEstadosFinais.getText().split(",");
        String estadosAux[] = s.split(",");
        // Verifica se o estado final √© um dos estados finais do aut√¥mato
        for (i = 0; i < estadosFinais.length; i++) {
            for (j = 0; j < estadosAux.length; j++) {
                if (estadosFinais[i].equals(estadosAux[j])) {
                    return "*";
                }
            }
        }
        return "";
    }

    private String proximoEstado(String p1, String p2) {
        int i;
        String s = null;
        // Encontra uma entrada na tabela de transi√ß√£o de estados
        for (i = 0; i < transicoes_afd.size(); i++) {
            if (transicoes_afd.get(i).getFrom() == (retornaIdEstado(p1))
                    && transicoes_afd.get(i).getRead().equals(p2)) {
                s = localizarTransicao(transicoes_afd.get(i).getTo(), auto_afd);
                break;
            }
        }
        return s;
    }

    private boolean estadoFinalAFD(String s) {
        int i;
        for (i = 0; i < estadosFinaisAFD.size(); i++) {
            if (estadosFinaisAFD.get(i).getId() == retornaIdEstado(s)) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConverter;
    private javax.swing.JButton buttonExecutar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextAreaResultados;
    private javax.swing.JTextField jTextFieldAlfabeto;
    private javax.swing.JTextField jTextFieldEntrada;
    private javax.swing.JTextField jTextFieldEstadoInicial;
    private javax.swing.JTextField jTextFieldEstadosFinais;
    private javax.swing.JTable tabelaTransicaoAFD;
    private javax.swing.JTable tabelaTransicaoAFND;
    // End of variables declaration//GEN-END:variables
}
